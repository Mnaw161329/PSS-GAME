<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Match the Same</title>
<style>
  body {
    font-family: fantasy;
    background-color: #f0f0f0;
    margin: 0;
    padding: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: auto;
  }

  .game {
    display: grid;
    grid-template-columns: repeat(4, 80px);
    grid-template-rows: repeat(6, 70px);
    grid-gap: 10px;
  }

  .card {
    background-color: #ffffff;
    border-radius: 15px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 28px;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  }

  #timer-bar {
    margin-top: 20px;
    height: 20px;
    width: 100%;
    background-color: #4caf50;
    border-radius: 10px;
    transition: width 0.5s linear;
    border: 1px solid #aaa;
  }

  #score {
    margin-top: 20px;
    font-size: 24px;
    color: #333;
  }
</style>
</head>
<body>
<h2>Match the Same</h2>
<div class="game" id="game"></div>
<div id="timer-bar"></div>
<div id="score">Score: <span id="scoreValue">0</span></div>

<script>

let symbols = ['üçé', 'üçå', 'üçí', 'üçá'];
const timerDuration = 60; // seconds
const timeBar = document.getElementById('timer-bar');
const gameContainer = document.getElementById('game');
const scoreValueElement = document.getElementById('scoreValue');

let timer = null;
let timeLeft = timerDuration;
let score = 0;
let matchedPairs = 0;
let level = 1;
let firstCard = null;
let secondCard = null;

function startTimer() {
  timeLeft = timerDuration;
  clearInterval(timer);
  timer = setInterval(updateTimer, 500);
}

function updateTimer() {
  timeLeft--;
  const percentage = (timeLeft / timerDuration) * 100;
  timeBar.style.width = percentage + '%';
  if (timeLeft <= 0) {
    clearInterval(timer);
    alert('Time is up! You lose.');
    resetGame();
  }
}

function renderCards() {
  gameContainer.innerHTML = '';
  const shuffledSymbols = shuffleArray(symbols.concat(symbols));
  shuffledSymbols.forEach((symbol, index) => {
    const card = document.createElement('div');
    card.classList.add('card');
    card.dataset.index = index;
    card.innerHTML = '<span style="visibility: hidden;">' + symbol + '</span>';
    card.addEventListener('click', handleCardClick);
    gameContainer.appendChild(card);
  });
}

function handleCardClick(event) {
  const clickedCard = event.target;
  if (!firstCard) {
    firstCard = clickedCard;
    showCard(firstCard);
  } else if (firstCard !== clickedCard) {
    secondCard = clickedCard;
    showCard(secondCard);
    checkMatch();
  }
}

function showCard(card) {
  card.querySelector('span').style.visibility = 'visible';
}

function checkMatch() {
  const firstSymbol = firstCard.querySelector('span').innerText;
  const secondSymbol = secondCard.querySelector('span').innerText;
  if (firstSymbol === secondSymbol) {
    score++;
    scoreValueElement.innerText = score;
    matchedPairs++;
    if (score === symbols.length) {
      clearInterval(timer);
      if (symbols.length === 4) {
        symbols = symbols.concat(['üçä', 'üçâ']); // Add 2 items for next level
      } else if(symbols.length === 6) {
        symbols = symbols.concat(['ü•ù', 'üçè']); // Fixed missing closing single quote
      } else if(symbols.length === 8) {
        symbols = symbols.concat(['ü•ë', 'üçÖ']); // Fixed missing closing single quote
      } else if (symbols.length === 10) {
          symbols = symbols.concat(['ü´ê', 'üçá']); // Fixed missing closing single quote
      } else if (symbols.length === 12) {
          symbols = symbols.concat(['üåΩ', 'üçÜ']); // Fixed missing closing single quote
      }
      level++;
      score = 0; // Reset score
      scoreValueElement.innerText = score;
      matchedPairs = 0;
      startGame(); // Start next level
    }
    firstCard = null;
    secondCard = null;
  } else {
    setTimeout(() => {
      firstCard.querySelector('span').style.visibility = 'hidden';
      secondCard.querySelector('span').style.visibility = 'hidden';
      firstCard = null;
      secondCard = null;
    }, 1000);
  }
}

function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

function startGame() {
  renderCards();
  startTimer();
}

function resetGame() {
  score = 0;
  matchedPairs = 0;
  scoreValueElement.innerText = score;
  level = 1;
  symbols = ['üçé', 'üçå', 'üçí', 'üçá']; // Reset symbols array
  startGame();
}

startGame();
</script>
</body>
</html>
